{"posts":[{"meta":{"title":"代码中创建 DynamicColor 和 DynamicImage","date":1660608000000,"tags":["iOS"]},"summary":"<p><code class=\"codespan\">iOS13</code>开始正式支持<code class=\"codespan\">Light/Dark Mode</code>，许多资源都需要准备两套，分别在<code class=\"codespan\">Light</code>和<code class=\"codespan\">Dark</code>模式中使用。在模式切换时，有<code class=\"codespan\">traitCollectionDidChange</code>的回调，同时也会触发组件的绘制/布局等方法，让我们有机会进行资源调整。对于<strong>Color</strong>和<strong>Image</strong>这两种非常高频的资源，系统也贴心地提供了自适应方案，在资源管理器<code class=\"codespan\">Assets</code>中可以编辑资源的属性，修改<code class=\"codespan\">Appearances</code>选项，就可以配置不同模式下的版本。</p>\n<p>理想状况是所有资源都提前配置，用的时候非常方便，但实践中会有大量的情况需要从代码中创建资源，并需要支持不同的模式。系统给<code class=\"codespan\">UIColor</code>提供了<code class=\"codespan\">UIColor(dynamicProvider:)</code>方法，可以根据不同的<code class=\"codespan\">traitCollection</code>返回定制的颜色，但<code class=\"codespan\">UIImage</code>却没有？？</p>","isDraft":false,"url":"/blog/posts/tech/2022-08-16-DynamicColor_Image.md","name":"DynamicColor_Image"},{"meta":{"title":"制造一个 @PublishedObject","date":1659571200000,"tags":["SwiftUI","Combine"]},"summary":"<p>在<code class=\"codespan\">SwiftUI</code>中，<code class=\"codespan\">PropertyWrapper</code>随处可见。每种都有各自的职责，背后的逻辑和内存管理也有所不同。随着升级，<code class=\"codespan\">SwiftUI</code>也逐渐增加了一些新的<code class=\"codespan\">PropertyWrapper</code>，但实践中发现，有一种需求一直没有被满足，那就是<code class=\"codespan\">@PublishedObject</code>（根据<code class=\"codespan\">SwiftUI</code>的命名风格，我自己起的😅）。</p>","isDraft":false,"url":"/blog/posts/tech/2022-08-04-PublishedObject.md","name":"PublishedObject"},{"meta":{"title":"在 UIKit 中使用 SwiftUI","date":1659052800000,"tags":["SwiftUI","iOS"]},"summary":"<p><code class=\"codespan\">iOS13</code>首次推出了<code class=\"codespan\">SwiftUI</code>，当时<code class=\"codespan\">react</code>，<code class=\"codespan\">vue</code>这些声明式的前端框架已经火到爆，还有大神在造新的轮子，移动端也有<code class=\"codespan\">React-Native</code>，<code class=\"codespan\">Weex</code>，<code class=\"codespan\">Flutter</code>，<code class=\"codespan\">NativeScript</code>等也在搞声明式，不过他们的主要目标是跨平台。</p>\n<p><code class=\"codespan\">Apple</code>慌吗？慌吧？我觉得<code class=\"codespan\">Google</code>也慌。<code class=\"codespan\">2019年</code>苹果发布了<code class=\"codespan\">SwiftUI</code>，同年的<code class=\"codespan\">Google IO</code>上发布了<code class=\"codespan\">Compose Beta</code>，应该没商量过，不过也能看出来他俩挺着急的，首秀的自家框架超多<code class=\"codespan\">Bug</code>，管不了那么多了，<strong>先上线</strong>！</p>","isDraft":false,"url":"/blog/posts/tech/2022-07-29-SwiftUI-in-UIKit.md","name":"SwiftUI-in-UIKit"}],"about":{"meta":{},"summary":"<h2 id=\"我自己\">我自己</h2>","isDraft":false,"url":"/blog/posts/about/about.md","name":"about"}}